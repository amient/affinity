import javafx.scene.effect.Shadow

group = 'io.amient.affinity'
version = '0.5.0-SNAPSHOT'

ext {
    javaVersion = '1.8'
    junitVersion = '4.12'
    typesafeConfigVersion = '1.3.0'
    //
    scalaVersion = '2.11.8'
    scalaTestVersion = '2.2.6'
    scalaCheckVersion = '1.12.5'
    slf4jVersion = '1.7.21'
    akkaVersion = '2.4.20'
    akkaHttpVersion = '10.0.10'
    //
    avroVersion = '1.8.2' // avro version provides also jackson transiently
    zkClientVersion = '0.10' // zkclient provides zookeeper server transitively
    kafkaVersion = '1.0.0'
    sparkVersion = '2.0.2'
    confluentVersion = '4.0.0'
    //
    baseKafkaVersion = kafkaVersion.split("\\.")[0] + '.' + kafkaVersion.split("\\.")[1]
    baseScalaVersion = scalaVersion.split("\\.")[0] + '.' + scalaVersion.split("\\.")[1]
    baseSparkVersion = sparkVersion.split("\\.")[0] + '.' + sparkVersion.split("\\.")[1]

}

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}

allprojects {

    apply plugin: 'idea'

    version = rootProject.version

    buildscript {
        repositories {
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
        dependencies {
            classpath "com.github.jengelman.gradle.plugins:shadow:2.0.1"
        }
    }

    plugins.withType(MavenPlugin).whenPluginAdded {

        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar) {
            classifier = 'javadoc'
            from javadoc
        }

        artifacts {
            archives javadocJar, sourcesJar
        }

        if (rootProject.hasProperty("maven-central")) {
            signing {
                sign configurations.archives
            }

            uploadArchives {
                repositories {

                    mavenDeployer {

                        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                            authentication(userName: ossrhUsername, password: ossrhPassword)
                        }

                        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                            authentication(userName: ossrhUsername, password: ossrhPassword)
                        }

                        if (plugins.hasPlugin(ScalaPlugin)) {
                            pom.artifactId = project.name + "_scala-" + baseScalaVersion
                        }

                        pom.project {

                            name 'Affinity Library'
                            packaging 'jar'
                            // optionally artifactId can be defined here
                            description 'Library for building fast, scalable, fault-tolerant Data APIs based on Akka, ZooKeeper and Kafka.'
                            url 'https://github.com/amient/affinity'

                            scm {
                                connection 'scm:git:https://github.com/amient/affinity.git'
                                developerConnection 'scm:git:https://github.com/amient/affinity.git'
                                url 'https://github.com/amient/affinity.git'
                            }

                            licenses {
                                license {
                                    name 'The Apache License, Version 2.0'
                                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                }
                            }

                            developers {
                                developer {
                                    id 'michal.haris'
                                    name 'Michal Haris'
                                    email 'mharis@amient.io'
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    plugins.withType(JavaPlugin).whenPluginAdded {

        sourceCompatibility = rootProject.ext.javaVersion

        libsDirName = 'lib' //gradle's default is libs but CreateStartScripts needs this to be lib

        repositories {
            mavenLocal()
            mavenCentral()
            maven {
                url "http://packages.confluent.io/maven/"
            }
        }

        configurations {
            provided
            testCompile.extendsFrom provided
        }

        sourceSets {
            main.compileClasspath += configurations.provided
            test.compileClasspath += configurations.provided
            test.runtimeClasspath += configurations.provided
        }

        idea {
            module {
                scopes.PROVIDED.plus += [configurations.provided]
            }
        }

        test.systemProperties 'property': 'value'

        dependencies {
            compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
            testCompile group: 'junit', name: 'junit', version: junitVersion
            testCompile group: 'org.slf4j', name: 'slf4j-jdk14', version: slf4jVersion
        }

        configurations {
            all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        }

    }

    plugins.withType(ScalaPlugin).whenPluginAdded {

        task scalaTest(dependsOn: ['testClasses'], type: JavaExec) {
            main = 'org.scalatest.tools.Runner'
            jvmArgs = ['-Djava.util.logging.config.file=' + rootProject.projectDir + '/api/src/main/resources/logging.properties']
            args = ['-R', 'build/classes/test', '-o']
            classpath = sourceSets.test.runtimeClasspath
        }
        test.dependsOn scalaTest

        dependencies {
            testCompile group: 'org.scalatest', name: 'scalatest_' + baseScalaVersion, version: scalaTestVersion
            testCompile group: 'org.scalacheck', name: 'scalacheck_' + baseScalaVersion, version: '1.12.5'
        }
    }
}

//monkey patch for IDEA vs. Gradle 3.+
ScalaCompileOptions.metaClass.daemonServer = true
ScalaCompileOptions.metaClass.fork = true
ScalaCompileOptions.metaClass.useAnt = false
ScalaCompileOptions.metaClass.useCompileDaemon = false
