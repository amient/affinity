affinity {

  avro {
    schema.registry.class = "io.amient.affinity.avro.MemorySchemaRegistry"
  }

  coordinator {
    class = "io.amient.affinity.core.cluster.CoordinatorEmbedded"
    embedded.id = 1
  }

  keyspace {
    simple-keyspace {
      num.partitions = 2
      class = "io.amient.affinity.example.minimal.MySimplePartition"

      state.cache {
        memstore.class = "io.amient.affinity.core.storage.rocksdb.MemStoreRocksDb"
        storage {
          class = "io.amient.affinity.kafka.KafkaLogStorage"
          kafka {
            bootstrap.servers = "localhost:9092"
            topic = "minimal"
          }
        }
      }
    }
  }

  node {
    name = "MinimalExampleSystem"
    data.dir = "./.data/minimal-example"

    container {
      simple-keyspace = [0, 1]
    }

    gateway {
      class = "io.amient.affinity.example.minimal.MyHttpGateway"
      http {
        host = "0.0.0.0"
        port = 8881
        tls.keystore {
          password = "123456"
          standard = "PKCS12"
          resource = "keystore.p12"
        }
      }
    }
  }

}

akka {
  loglevel = "DEBUG"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-config-on-start = off
}
