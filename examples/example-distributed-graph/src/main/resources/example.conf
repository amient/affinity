akka {
  loglevel = "INFO"

  remote {
    log-remote-lifecycle-events = off
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = "127.0.0.1"
    }
  }

  actor {
    provider = "akka.remote.RemoteActorRefProvider"
  }

}

affinity {

  node {}

  avro {
    schema.provider.class = "io.amient.affinity.example.data.MyAvroSerde"
    zookeeper-schema-registry {
      zookeeper.connect = "localhost:2181"
      zookeeper.timeout.connect.ms = 20000
      zookeeper.timeout.session.ms = 30000
      zookeeper.root = "/affinity-schema-registry"
    }
  }

  coordinator {
    class = "io.amient.affinity.core.cluster.CoordinatorZk"
    zookeeper.connect = "localhost:2181"
    zookeeper.timeout.connect.ms = 6000
    zookeeper.timeout.session.ms = 30000
    zookeeper.root = "/affinity"
  }

  service {
    user-mediator {
      num.partitions = 1
      class = "io.amient.affinity.example.service.UserInputMediator"
    }
    graph {
      num.partitions = 4
      class = "io.amient.affinity.example.data.DataPartition"
    }
  }

  state.settings {
    memstore.class = "io.amient.affinity.core.storage.MemStoreConcurrentMap"
    storage {
      class = "io.amient.affinity.core.storage.kafka.KafkaStorage"
      kafka {
        bootstrap.servers = "localhost:9092"
        topic = "settings"
        producer {
          acks = "all"
          retries = 0
          linger.ms = 0
        }
      }
    }
  }

  state.graph {
    memstore.class = "io.amient.affinity.core.storage.MemStoreSimpleMap"
    storage {
      class = "io.amient.affinity.core.storage.kafka.KafkaStorage"
      kafka {
        bootstrap.servers = "localhost:9092"
        topic = "graph"
        producer {
          acks = "all"
          retries = 0
          linger.ms = 0
        }
      }
    }
  }

  state.components {
    memstore.class = "io.amient.affinity.core.storage.MemStoreSimpleMap"
    storage {
      class = "io.amient.affinity.core.storage.kafka.KafkaStorage"
      kafka {
        bootstrap.servers = "localhost:9092"
        topic = "components"
        producer {
          acks = "all"
          retries = 0
          linger.ms = 0
        }
      }
    }
  }

  state.cache {
    memstore.class = "io.amient.affinity.core.storage.MemStoreConcurrentMap"
    storage.class = "io.amient.affinity.core.storage.NoopStorage"
  }


}
